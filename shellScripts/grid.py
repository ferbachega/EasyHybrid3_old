'''
There is also an array vOff that specifies the offsets of each of the 14 neighbor
cells. The array covers half the neighboring cells, together with the cell itself; its
size and contents are specified as

{{0,0,0}, {1,0,0}, {1,1,0}, {0,1,0}, {-1,1,0}, {0,0,1},
{1,0,1}, {1,1,1}, {0,1,1}, {-1,1,1}, {-1,0,1},
{-1,-1,1}, {0,-1,1}, {1,-1,1}}



                                                            |-------|-------|-------|-------| 
                                                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
                                                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
                                                            |-1,2,2 | 0,2,2 | 1,2,2 | 2,2,2 | 
                                                            |-------|-------|-------|-------| 
                                                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
                                                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
                                                            |-1,1,2 | 0,1,2 | 1,1,2 | 2,1,2 | 
                                                            |-------|-------|-------|-------| 
                                                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|
                                                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|
                                                            |-1,0,2 | 0,0,2 | 1,0,2 | 2,0,2 |
                                                            |-------|-------|-------|-------|
                                                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|
                                                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|
                                                            |-1,-1,2| 0,-1,2| 1,-1,2| 2,-1,2|
                                                            |-------|-------|-------|-------|   
                               


                            |-------|-------|-------|-------| 
                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
                            |-1,2,1 | 0,2,1 | 1,2,1 | 2,2,1 | 
                            |-------|-------|-------|-------| 
                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
                            |-1,1,1 | 0,1,1 | 1,1,1 | 2,1,1 | 
                            |-------|-------|-------|-------| 
                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|
                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|
                            |-1,0,1 | 0,0,1 | 1,0,1 | 2,0,1 |
                            |-------|-------|-------|-------|
                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|
                            |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|
                            |-1,-1,1| 0,-1,1| 1,-1,1| 2,-1,1|
                            |-------|-------|-------|-------|
                            
                            
                            
                            
   |-------|-------|-------|-------|-------| 
   |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
   |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
   |-2,2,0 |-1,2,0 | 0,2,0 | 1,2,0 | 2,2,0 | 
   |-------|-------|-------|-------|-------| 
   |       |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
   |       |\\\\\\\|\\\\\\\|\\\\\\\|\\\\\\\| 
   |-2,1,0 |-1,1,0 | 0,1,0 | 1,1,0 | 2,1,0 | 
   |-------|-------|-------|-------|-------| 
   |       |       |XXXXXXX|\\\\\\\|\\\\\\\|
   |       |       |XXXXXXX|\\\\\\\|\\\\\\\|
   |-2,0,0 |-1,0,0 | 0,0,0 | 1,0,0 | 2,0,0 |
   |-------|-------|-------|-------|-------|
   |       |       |       |       |       |
   |       |       |       |       |       |
   |-2,-1,0|-1,-1,0| 0,-1,0| 1,-1,0| 2,-1,0|
   |-------|-------|-------|-------|-------|

always. the combination between {0,0,0} and some element of the list (\\\\\\) 

returns a list contain lists of atoms [[atoms1],atoms2], ...]

'''
#pair_of_sectors2


#grid_offset
pair_of_sectors2 = []
grid_offset = [
               #[ 1,-1, 0],
               #[ 0,-1, 0],
               #[-1,-1, 0],
               #[-1, 0, 0],
               
               #[ 0, 0, 0], 
               
               [ 1, 0, 0], 
               [ 1, 1, 0], 
               [ 0, 1, 0], 
               [-1, 1, 0], 
               
               #[-1, 2, 0],
               
               [ 0, 2, 0],
               
               #[ 1, 2, 0],
               #[ 2, 2, 0],
               #[ 2, 1, 0],
               
               [ 2, 0, 0],
               
               [ 2,-1, 0],                   
               
               [ 0, 0, 1],
               [ 1, 0, 1], 
               [ 1, 1, 1], 
               [ 0, 1, 1], 
               [-1, 1, 1], 
               [-1, 0, 1],
               [-1,-1, 1], 
               [ 0,-1, 1], 
               [ 1,-1, 1],
               
               #[-1, 2, 1],
               #[ 0, 2, 1],
               #[ 1, 2, 1],
               #[ 2, 2, 1],
               #[ 2, 1, 1],
               #[ 2, 0, 1],
               #[ 2,-1, 1],
               #
               #
               #[1,-2, -1],
            

               [ 0, 0, 2],
               
               #[ 1, 0, 2], 
               #[ 1, 1, 2], 
               #[ 0, 1, 2], 
               #[-1, 1, 2], 
               #[-1, 0, 2],
               #[-1,-1, 2], 
               #[ 0,-1, 2], 
               #[ 1,-1, 2],
               #
               #
               #[-1, 2, 2],
               #[ 0, 2, 2],
               #[ 1, 2, 2],
               #[ 2, 2, 2],
               #[ 2, 1, 2],
               #[ 2, 0, 2],
               #[ 2,-1, 2],

               [0,-1,-2],

            
               ]



grid_offset_full = []
gridsize = 0.8

maxbond  = 2.2
n = 0

borderGrid  = maxbond/gridsize
borderGrid  = int(borderGrid) 


#first floor
N = 0

for i in range (-borderGrid, borderGrid + 1):
    
    n = 0
    for j in range(0, borderGrid + 1):
        #counter = i + n +1
        
        # we don't need all the elements to the first floor
        if i < 0 and j == 0:
            pass
        
        else:

            # we don't need the [0,0,0] element to the first floor
            if [i,j, 0] == [0,0,0]:
                pass
        
            else:
                    
                if -i == j:
                    print([i,j,0], N+1, 'diagonal')
                else:
                    print([i,j,0], N+1, '')
                
                grid_offset_full.append([i,j,0])
                N+=1
        
        n+=1

for element in grid_offset_full:
    d2 = (element[0]+1)**2 + (element[1]+1)**2 + (element[2]+1)**2
    print  (element, d2, 'demax:',d2**0.5, 'demin', 0 ) 

#'''
#n = 0
#for i in range (-borderGrid, borderGrid + 1):
#    for j in range(-borderGrid, borderGrid + 1):
#        for k in range(1, borderGrid + 1):
#            grid_offset_full.append([i,j,k])
#            print([i,j,k], n+1)
#            n+=1
#'''
#
#
#
#
#
#
#'''
#for i in range (-borderGrid, borderGrid + 1):
#    for j in range(0, borderGrid + 1):
#        print([i,j,0], n+1)
#'''
#
#
#
#'''
#for i in range (-borderGrid, borderGrid + 1):
#    for j in range(-borderGrid, borderGrid + 1):
#        for k in range(-borderGrid, borderGrid + 1):
#            grid_offset_full.append([i,j,k])
#            print([i,j,k], n+1)
#            n+=1
#'''
#
#'''
#for element in grid_offset:
#    if element in grid_offset_full:
#        print (element, 'ok')
#    else:
#        print(element, 'missing')
#
#'''
